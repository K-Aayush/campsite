// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model User {
  id                    String                 @id @default(cuid()) @map("_id")
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  bookings              Booking[]
  wallet                Wallet?
  accounts              Account[]
  blogs                 Blog[]
  gallery               Gallery[]
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Wallet {
  id      String @id @default(cuid()) @map("_id")
  userId  String @unique
  balance Float  @default(0)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id          String    @id @default(cuid()) @map("_id")
  name        String
  description String
  price       Float
  image       String?
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Blog {
  id        String   @id @default(cuid()) @map("_id")
  title     String
  content   String
  image     String?
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gallery {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String?
  type        String // "image" or "video"
  url         String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Booking {
  id            String        @id @default(cuid()) @map("_id")
  userId        String
  serviceId     String
  startDate     DateTime
  endDate       DateTime
  totalAmount   Float
  depositAmount Float
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentProof  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id])
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
